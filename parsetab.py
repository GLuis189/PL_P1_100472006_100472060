
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CADENA_COMILLAS CADENA_NO_COMILLAS COMA DOS_PUNTOS FALSE IGUAL LLAVE_ABRE LLAVE_CIERRA MAYOR MAYOR_IGUAL MENOR MENOR_IGUAL NULO NUMERO NUMERO TRUEprograma : LLAVE_ABRE lista LLAVE_CIERRA\n                | LLAVE_ABRE LLAVE_CIERRAlista : elemento\n             | elemento COMA \n             | elemento COMA listaelemento : CADENA_NO_COMILLAS DOS_PUNTOS valor\n                | CADENA_COMILLAS DOS_PUNTOS valor\n                | NULOvalor : CADENA_COMILLAS\n             | NUMERO\n             | comparacion\n             | TRUE\n             | FALSE\n             | NULO\n             | programacomparacion : NUMERO MAYOR NUMERO\n                   | NUMERO MENOR NUMERO\n                   | NUMERO MAYOR_IGUAL NUMERO\n                   | NUMERO MENOR_IGUAL NUMERO\n                   | NUMERO IGUAL NUMERO'
    
_lr_action_items = {'LLAVE_ABRE':([0,11,12,],[2,2,2,]),'$end':([1,4,9,],[0,-2,-1,]),'LLAVE_CIERRA':([2,3,4,5,8,9,10,13,14,15,16,17,18,19,20,21,22,28,29,30,31,32,],[4,9,-2,-3,-8,-1,-4,-5,-6,-9,-10,-11,-12,-13,-14,-15,-7,-16,-17,-18,-19,-20,]),'CADENA_NO_COMILLAS':([2,10,],[6,6,]),'CADENA_COMILLAS':([2,10,11,12,],[7,7,15,15,]),'NULO':([2,10,11,12,],[8,8,20,20,]),'COMA':([4,5,8,9,14,15,16,17,18,19,20,21,22,28,29,30,31,32,],[-2,10,-8,-1,-6,-9,-10,-11,-12,-13,-14,-15,-7,-16,-17,-18,-19,-20,]),'DOS_PUNTOS':([6,7,],[11,12,]),'NUMERO':([11,12,23,24,25,26,27,],[16,16,28,29,30,31,32,]),'TRUE':([11,12,],[18,18,]),'FALSE':([11,12,],[19,19,]),'MAYOR':([16,],[23,]),'MENOR':([16,],[24,]),'MAYOR_IGUAL':([16,],[25,]),'MENOR_IGUAL':([16,],[26,]),'IGUAL':([16,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,11,12,],[1,21,21,]),'lista':([2,10,],[3,13,]),'elemento':([2,10,],[5,5,]),'valor':([11,12,],[14,22,]),'comparacion':([11,12,],[17,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> LLAVE_ABRE lista LLAVE_CIERRA','programa',3,'p_programa','ajson_parser.py',7),
  ('programa -> LLAVE_ABRE LLAVE_CIERRA','programa',2,'p_programa','ajson_parser.py',8),
  ('lista -> elemento','lista',1,'p_lista','ajson_parser.py',12),
  ('lista -> elemento COMA','lista',2,'p_lista','ajson_parser.py',13),
  ('lista -> elemento COMA lista','lista',3,'p_lista','ajson_parser.py',14),
  ('elemento -> CADENA_NO_COMILLAS DOS_PUNTOS valor','elemento',3,'p_elemento','ajson_parser.py',17),
  ('elemento -> CADENA_COMILLAS DOS_PUNTOS valor','elemento',3,'p_elemento','ajson_parser.py',18),
  ('elemento -> NULO','elemento',1,'p_elemento','ajson_parser.py',19),
  ('valor -> CADENA_COMILLAS','valor',1,'p_valor','ajson_parser.py',22),
  ('valor -> NUMERO','valor',1,'p_valor','ajson_parser.py',23),
  ('valor -> comparacion','valor',1,'p_valor','ajson_parser.py',24),
  ('valor -> TRUE','valor',1,'p_valor','ajson_parser.py',25),
  ('valor -> FALSE','valor',1,'p_valor','ajson_parser.py',26),
  ('valor -> NULO','valor',1,'p_valor','ajson_parser.py',27),
  ('valor -> programa','valor',1,'p_valor','ajson_parser.py',28),
  ('comparacion -> NUMERO MAYOR NUMERO','comparacion',3,'p_comparacion','ajson_parser.py',31),
  ('comparacion -> NUMERO MENOR NUMERO','comparacion',3,'p_comparacion','ajson_parser.py',32),
  ('comparacion -> NUMERO MAYOR_IGUAL NUMERO','comparacion',3,'p_comparacion','ajson_parser.py',33),
  ('comparacion -> NUMERO MENOR_IGUAL NUMERO','comparacion',3,'p_comparacion','ajson_parser.py',34),
  ('comparacion -> NUMERO IGUAL NUMERO','comparacion',3,'p_comparacion','ajson_parser.py',35),
]
